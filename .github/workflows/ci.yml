name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test on ${{ matrix.os }} with Swift ${{ matrix.swift-version }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-14, macos-15, macos-latest, ubuntu-latest, windows-latest]
        swift-version: ['6.0']
        
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: ${{ matrix.swift-version }}
      if: runner.os != 'Windows'
        
    - name: Setup Swift on Windows
      uses: compnerd/gha-setup-swift@main
      with:
        branch: swift-${{ matrix.swift-version }}-release
        tag: ${{ matrix.swift-version }}-RELEASE
      if: runner.os == 'Windows'
        
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: |
          .build
          ~/.cache/org.swift.swiftpm
        key: ${{ runner.os }}-spm-${{ hashFiles('Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
          
    - name: Build
      run: swift build -c release --verbose
      
    - name: Run Tests (Unit Tests Only)
      run: swift test --filter TachikomaBuildersTests --filter TachikomaCLITests --filter TachikomaTests
      env:
        # Disable real API tests in CI
        TACHIKOMA_DISABLE_API_TESTS: "true"
        
    - name: Run Package Tests (No External API)
      run: swift test --build-path .build-test --verbose
      env:
        # Mock all external API calls
        TACHIKOMA_TEST_MODE: "mock"
        TACHIKOMA_DISABLE_API_TESTS: "true"
      continue-on-error: true # Temporarily allow test failures while we fix them

  build-examples:
    name: Build Examples on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: '6.0'
      if: runner.os != 'Windows'
        
    - name: Setup Swift on Windows
      uses: compnerd/gha-setup-swift@main
      with:
        branch: swift-6.0-release
        tag: 6.0-RELEASE
      if: runner.os == 'Windows'
        
    - name: Build Examples
      run: |
        # Build standalone examples
        swift build --package-path . -c release
        
        # Compile example scripts to check syntax
        find . -name "*.swift" -path "./Examples/*" -exec swift -typecheck {} \;
        find . -name "*_demo.swift" -exec swift -typecheck {} \;
        find . -name "*_examples.swift" -exec swift -typecheck {} \;

  lint:
    name: SwiftLint
    runs-on: macos-14
    # SwiftLint only runs on macOS
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: SwiftLint
      uses: norio-nomura/action-swiftlint@3.2.1
      continue-on-error: true # Don't fail CI on lint issues initially